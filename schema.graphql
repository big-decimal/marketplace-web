enum UserRole {
  OWNER
  ADMIN
  CONSUMER
}

enum MemberRole {
  OWNER
  ADMIN
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ProductStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
  DENIED
}

enum ShopStatus {
  LIVE
  PENDING
  DENIED
}

type ProductOption {
  key: String!
  name: String!
}

type ProductOptionValue {
  option: String!
  value: String!
}

type ProductVariant {
  key: String!
  title: String!
  price: Float
  sku: String
  options: [ProductOptionValue]
}

type Location {
  lat: String!
  long: String!
}

type Banner @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admins"]}]) {
  id: ID!
  image: String
  link: String
  position: Int!
}

type Category @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admins"]}]) {
  id: ID!
  name: String!
  slug: String!
  image: String
  isMain: Boolean @default(value: "false")
  categoryID: ID @index(name: "byCategory")
  category: Category @belongsTo(fields: ["categoryID"])
  products: [Product] @hasMany(indexName: "byCategory", fields: ["id"])
  categories: [Category] @hasMany(indexName: "byCategory", fields: ["id"])
}

type ShopCategory @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admins"]}]) {
  id: ID!
  name: String!
  shops: [Shop] @hasMany(indexName: "byShopCategory", fields: ["id"])
}

type Discount @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  title: String!
  value: Float!
  type: DiscountType!
  productCount: Int @default(value: "0")
  shopID: ID! @index(name: "byShop", queryField: "getDiscountsByShop")
  products: [Product] @hasMany(indexName: "byDiscount", fields: ["id"])
}

type Product @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  name: String!
  slug: String! @index(name: "productBySlug", queryField: "getProductBySlug")
  thumbnail: String
  images: [String]
  price: Float
  sku: String
  description: String
  hasVariant: Boolean @default(value: "false")
  newArrival: Boolean @default(value: "false")
  outOfStock: Boolean @default(value: "false")
  deleted: Boolean @default(value: "false")
  featured: Boolean @default(value: "false")
  status: ProductStatus @default(value: "DRAFT")
  createdBy: String
  updatedBy: String
  options: [ProductOption]
  variants: [ProductVariant]
  discountID: ID @index(name: "byDiscount")
  categoryID: ID! @index(name: "byCategory")
  shopID: ID! @index(name: "byShop")
  discount: Discount @belongsTo(fields: ["discountID"])
  category: Category @belongsTo(fields: ["categoryID"])
  shop: Shop @belongsTo(fields: ["shopID"])
  favoriteUsers: [FavoriteProduct] @hasMany(indexName: "byProduct", fields: ["id"])
  cartItems: [CartItem] @hasMany(indexName: "byProduct", fields: ["id"])
  type: String @default(value: "product") @index(name: "productsByPrice", queryField: "getProductsOrderByPrice", sortKeyFields: ["price"])
}

type Shop @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  name: String!
  slug: String! @index(name: "shopBySlug", queryField: "getShopBySlug")
  logo: String
  cover: String
  description: String
  location: Location
  recommended: Boolean @default(value: "false")
  status: ShopStatus @default(value: "PENDING")
  createdBy: String
  updatedBy: String
  categoryID: ID! @index(name: "byShopCategory", queryField: "getShopsByCategory")
  category: ShopCategory @belongsTo(fields: ["categoryID"])
  products: [Product] @hasMany(indexName: "byShop", fields: ["id"])
  members: [ShopMember] @hasMany(indexName: "byShop", fields: ["id"])
  discounts: [Discount] @hasMany(indexName: "byShop", fields: ["id"])
}

type User @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  phone: String!
  email: String
  image: String
  disabled: Boolean @default(value: "false")
  role: UserRole!
  shops: [ShopMember] @hasMany(indexName: "byUser", fields: ["id"])
  addresses: [UserAddress] @hasMany(indexName: "byUser", fields: ["id"])
  cartItems: [CartItem] @hasMany(indexName: "byUser", fields: ["id"])
  favoriteProducts: [FavoriteProduct] @hasMany(indexName: "byUser", fields: ["id"])
}

type ShopMember @model @auth(rules: [{allow: private}]) {
  id: ID!
  role: MemberRole!
  shopID: ID! @index(name: "byShop")
  userID: ID! @index(name: "byUser")
  shop: Shop @belongsTo(fields: ["shopID"])
  user: User @belongsTo(fields: ["userID"])
}

type UserAddress @model @auth(rules: [{allow: private}]) {
  id: ID!
  city: String!
  township: String!
  address: String!
  primary: Boolean
  userID: ID! @index(name: "byUser")
}

type CartItem @model @auth(rules: [{allow: private}]) {
  id: ID!
  quantity: Int @default(value: "1")
  userID: ID! @index(name: "byUser", queryField: "getCartItemsByUser")
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type FavoriteProduct @model @auth(rules: [{allow: private}]) {
  id: ID!
  userID: ID! @index(name: "byUser", queryField: "getFavoriteProductsByUser")
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}
